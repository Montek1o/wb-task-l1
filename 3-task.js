// Task:
// Реализовать аналог библиотеки Math (можно назвать MathX) с базовым набором функций, используя замыкания:
// * вычисление N-го числа в ряду Фибоначчи 
// * вычисление всех чисел в ряду Фибоначчи до числа N
// * вычисление N-го просто числа
// * вычисление всех простых чисел до числа N
// Будет плюсом, если задумаетесь и об оптимизации.

function mathX() {
  return {
    // вычесление n-го числа в ряду Фибоначи
    numberFibonacci: (n) => {
      // первые два значения по определению равны 1
      let fib1 = 1;
      let fib2 = 1;
      // цикл начинается с индекса 3, так как первые два значения уже заданы
      for (let i = 0; i < n - 2; i++) {
        // находим следующее неизвестное значение складывая последние два
        let fibSum = fib1 + fib2;
        fib1 = fib2;
        fib2 = fibSum;
      }
      return fib2;
    },

    // вычесление всех чисел в ряду Фибоначи до числа n
    allNumbersFibonacci: (n) => {
      // создаём массив куда будем помещать все числа
      const numbers = [];
      for (let i = 1; i <= n; i++) {
        // вычисляем все числа Фибоначи до числа n и помещаем их в массив
        numbers.push(MathX.numberFibonacci(i));
      }
      return numbers;
    },

    // вычесление n-го простого числа
    primeNumber: (n) => {
      // наша задача проверить все числа до квадратного корня от n, и если n можно поделить на какое-то из них без остатка,
      // значит это не простое число. Начинаем с 2, так как простое число должно делиться на 1, плюс также само на себя.
      for (let i = 2, max = Math.sqrt(n); i <= max; i++) {
        if (n % i === 0) {
          return false;
        }
      }
      // если цикл пройден и мы не нашли делитель, значит число простое
      // также делаем доп. проверку на единицу, чтобы исключить 1 и отрицательные числа
      return n > 1;
    },

    // вычисление всех простых чисел до числа n
    allPrimeNumbers: (n) => {
      // используем алгоритм решето Эратосфена, создаём два массива, 
      // в одном (решето) мы будем отмечать позиции чисел, которые не являются простыми
      // во втором будем складывать простые числа
      const seive = [];
      const primes = [];
      for (let i = 2; i <= n; i++) {
        // если число i есть в массиве с решетом, то это не простое число
        if (!seive[i]) {
          // если его нет, то это простое число
          primes.push(i);
          // фильтруем все числа, которые делятся на число добавленное в массив с результатом
          for (let j = i * i; j <= n; j += i) {
            seive[j] = j;
          }
        }
      }
      return primes;
    }
  }
}

const MathX = mathX();

console.log(MathX.numberFibonacci(8)); // 21
console.log(MathX.allNumbersFibonacci(8)); // [1, 1, 2, 3, 5, 8, 13, 21]
console.log(MathX.primeNumber(4)); // false
console.log(MathX.primeNumber(3)); // true
console.log(MathX.allPrimeNumbers(20)); // [ 2,  3,  5,  7, 11, 13, 17, 19 ]